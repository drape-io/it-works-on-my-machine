[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "it-works-on-my-machine"
version = "0.1.0"
description = "A collection of intentionally flaky tests for testing tools and methodologies"
authors = [
    {name = "John", email = "john@drape.io"},
]
readme = "../README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-html>=3.2.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=it_works_on_my_machine",
    "--cov-report=html:../reports/python/htmlcov",
    "--cov-report=xml:../reports/python/coverage.xml",
    "--cov-report=term-missing",
    "--html=../reports/python/pytest_report.html",
    "--self-contained-html",
    "--junitxml=../reports/python/junit.xml",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "flaky: marks tests as intentionally flaky",
    "probability: probability-based flaky tests",
    "timing: time-dependent flaky tests",
    "network: network simulation flaky tests",
    "concurrency: concurrency-related flaky tests",
    "environment: environment-dependent flaky tests",
    "stateful: stateful flaky tests",
]

[tool.coverage.run]
source = ["it_works_on_my_machine"]
omit = [
    "tests/*",
    "*/tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["it_works_on_my_machine"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[dependency-groups]
dev = [
    "mypy>=1.18.2",
]
