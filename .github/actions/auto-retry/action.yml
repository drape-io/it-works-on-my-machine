name: 'Auto Retry'
description: 'Automatically retry failed jobs with minimal setup'
author: 'drape-io'

inputs:
  max-attempts:
    description: 'Maximum retry attempts'
    required: false
    default: '3'
  retry-wait-seconds:
    description: 'Seconds to wait before triggering retry'
    required: false
    default: '10'
  pre-retry-command:
    description: 'Command to run before triggering retry'
    required: false
  warning-on-retry:
    description: 'Output warnings instead of info messages on retry'
    required: false
    default: 'true'
  github-token:
    description: 'GitHub token for API calls'
    required: false
    default: ${{ github.token }}
  job-name:
    description: 'Specific job name to retry (if not provided, auto-detects)'
    required: false
  force-retry:
    description: 'Force retry even if max attempts reached (use with caution)'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    # Show max attempts reached message
    - name: Max attempts reached
      if: >
        steps.test.outcome == 'failure' && 
        github.run_attempt >= fromJSON(inputs.max-attempts) &&
        inputs.force-retry != 'true'
      shell: bash
      run: |
        if [ "${{ inputs.warning-on-retry }}" = "true" ]; then
          echo "::warning::🚨 Max retry attempts reached (${{ github.run_attempt }}/${{ inputs.max-attempts }})"
        else
          echo "🚨 Max retry attempts reached (${{ github.run_attempt }}/${{ inputs.max-attempts }})"
        fi
        echo "❌ No more retries will be attempted for this workflow run"
        echo "💡 To retry again, manually re-run the workflow or push a new commit"
        echo "💡 Or set 'force-retry: true' to override this limit (use with caution)"
        
        # Add to step summary
        echo "## 🚨 Retry Limit Reached" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Attempt:** ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Max Attempts:** ${{ inputs.max-attempts }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** No more automatic retries will be triggered" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 **To retry:** Manually re-run this workflow or push a new commit" >> $GITHUB_STEP_SUMMARY
        echo "💡 **Or:** Set \`force-retry: true\` to override this limit (use with caution)" >> $GITHUB_STEP_SUMMARY
        
        # Exit with failure to ensure job shows as failed (red)
        echo "🔴 Exiting with failure status to show job as failed"
        exit 1

    # Detect failure and trigger retry (when used in regular jobs)
    - name: Trigger retry on failure
      if: >
        steps.test.outcome == 'failure' && 
        (github.run_attempt < fromJSON(inputs.max-attempts) || inputs.force-retry == 'true')
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # Check if this is a forced retry
        if [ "${{ inputs.force-retry }}" = "true" ] && [ "${{ github.run_attempt }}" -ge "${{ inputs.max-attempts }}" ]; then
          if [ "${{ inputs.warning-on-retry }}" = "true" ]; then
            echo "::warning::⚠️ FORCE RETRY: Job failed, triggering retry despite max attempts (attempt ${{ github.run_attempt }}/${{ inputs.max-attempts }})"
          else
            echo "⚠️ FORCE RETRY: Job failed, triggering retry despite max attempts (attempt ${{ github.run_attempt }}/${{ inputs.max-attempts }})"
          fi
          echo "🚨 This is a forced retry beyond the normal limit - use with caution"
        else
          # Normal retry within limits
          if [ "${{ inputs.warning-on-retry }}" = "true" ]; then
            echo "::warning::🔄 Job failed, triggering retry (attempt ${{ github.run_attempt }}/${{ inputs.max-attempts }})"
          else
            echo "🔄 Job failed, triggering retry (attempt ${{ github.run_attempt }}/${{ inputs.max-attempts }})"
          fi
        fi

        echo "📊 Run ID: ${{ github.run_id }}"
        echo "🌿 Ref: ${{ github.ref }}"

        # Determine the job name to retry
        if [ -n "${{ inputs.job-name }}" ]; then
          JOB_TO_RETRY="${{ inputs.job-name }}"
          echo "🎯 Using provided job name: $JOB_TO_RETRY"
        else
          echo "🔍 Auto-detecting current job name using runner matching..."
          
          # Use the brilliant runner name approach to find the current job
          echo "🔍 Current runner: $RUNNER_NAME"
          
          # Get jobs and find the one running on this specific runner
          gh api "repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" \
            --paginate > /tmp/jobs.json
          
          # Find job ID by matching runner name
          JOB_ID=$(jq -r --arg rn "$RUNNER_NAME" '
            .jobs[]
            | select(.runner_name == $rn)
            | .id
          ' /tmp/jobs.json | head -n1)
          
          if [ -n "$JOB_ID" ] && [ "$JOB_ID" != "null" ]; then
            # Get the job name using the found job ID
            JOB_TO_RETRY=$(jq -r --arg id "$JOB_ID" '
              .jobs[] 
              | select(.id == ($id|tonumber)) 
              | .name
            ' /tmp/jobs.json)
            
            if [ -n "$JOB_TO_RETRY" ] && [ "$JOB_TO_RETRY" != "null" ]; then
              echo "✅ Auto-detected job name: $JOB_TO_RETRY"
              echo "🔍 Job ID: $JOB_ID"
            else
              echo "::error::❌ Found job ID but couldn't get job name"
              echo "::error::Job ID: $JOB_ID"
              echo "::error::Please provide explicit 'job-name' input to the action"
              exit 1
            fi
          else
            echo "::error::❌ Could not find job by runner name"
            echo "::error::Unable to determine which specific job to retry"
            echo "::error::Please provide explicit 'job-name' input to the action"
            exit 1
          fi
          
          # Cleanup
          rm -f /tmp/jobs.json
        fi

        # Pre-retry command
        if [ -n "${{ inputs.pre-retry-command }}" ]; then
          echo "🧹 Running pre-retry command..."
          eval "${{ inputs.pre-retry-command }}" || echo "::warning::Pre-retry command failed, continuing..."
        fi
        
        # Wait before retry
        if [ "${{ inputs.retry-wait-seconds }}" != "0" ]; then
          echo "⏳ Waiting ${{ inputs.retry-wait-seconds }} seconds before retry..."
          sleep ${{ inputs.retry-wait-seconds }}
        fi

        # Wait for current workflow run to complete
        echo "⏳ Waiting for current run to complete..."
        gh run watch "${{ github.run_id }}" > /dev/null 2>&1 || true
        
        # Find the specific job ID for the job to retry
        echo "🔍 Finding job ID for: $JOB_TO_RETRY"
        SPECIFIC_JOB_ID=$(gh api "repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" \
          --jq ".jobs[] | select(.name == \"$JOB_TO_RETRY\") | .id")
        
        if [ -n "$SPECIFIC_JOB_ID" ]; then
          echo "🎯 Found job ID: $SPECIFIC_JOB_ID"
          echo "🔄 Re-running specific job: $JOB_TO_RETRY"
          gh api "repos/${{ github.repository }}/actions/jobs/$SPECIFIC_JOB_ID/rerun" -X POST
          echo "✅ Job $JOB_TO_RETRY (ID: $SPECIFIC_JOB_ID) rerun triggered"
          echo "🔗 Monitor at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Exit with failure to ensure job shows as failed (red) despite continue-on-error
          echo "🔴 Exiting with failure status to show job as failed"
          exit 1
        else
          echo "::error::❌ Could not find job '$JOB_TO_RETRY' in current run"
          echo "::error::Available jobs:"
          gh api "repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" \
            --jq '.jobs[] | "::error::  - \(.name) (ID: \(.id))"'
          exit 1
        fi

    # Provide helpful setup instructions if something fails
    - name: Check setup
      if: failure() && github.run_attempt >= fromJSON(inputs.max-attempts)
      shell: bash
      run: |
        echo "::warning::🚨 Max retry attempts reached (${{ inputs.max-attempts }})"
        echo "::notice::💡 The auto-retry action uses direct job rerun API calls"
        echo "::notice::💡 Each failed job will retry itself individually"
        echo "::notice::💡 Check the GitHub Actions logs for detailed retry information"