name: 'Auto Retry'
description: 'Automatically retry failed jobs with minimal setup'
author: 'drape-io'

inputs:
  max-attempts:
    description: 'Maximum retry attempts'
    required: false
    default: '3'
  retry-wait-seconds:
    description: 'Seconds to wait before triggering retry'
    required: false
    default: '10'
  pre-retry-command:
    description: 'Command to run before triggering retry'
    required: false
  warning-on-retry:
    description: 'Output warnings instead of info messages on retry'
    required: false
    default: 'true'
  github-token:
    description: 'GitHub token for API calls'
    required: false
    default: ${{ github.token }}
  job-name:
    description: 'Specific job name to retry (if not provided, retries all failed jobs)'
    required: false
  force-retry:
    description: 'Force retry even if max attempts reached (use with caution)'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    # Handle the retry execution (when triggered via repository_dispatch)
    - name: Execute retry
      if: >
        github.event_name == 'repository_dispatch' &&
        github.event.action == 'auto-retry' &&
        github.event.client_payload.attempt < fromJSON(inputs.max-attempts)
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        RUN_ID="${{ github.event.client_payload.run_id }}"
        WORKFLOW_NAME="${{ github.event.client_payload.workflow }}"
        ATTEMPT_NUM="${{ github.event.client_payload.attempt }}"

        echo "🔄 Executing retry for workflow: $WORKFLOW_NAME"
        echo "📊 Original run ID: $RUN_ID"
        echo "🔢 Attempt: $ATTEMPT_NUM/${{ inputs.max-attempts }}"

        # Pre-retry command
        if [ -n "${{ inputs.pre-retry-command }}" ]; then
          echo "🧹 Running pre-retry command..."
          eval "${{ inputs.pre-retry-command }}" || echo "::warning::Pre-retry command failed, continuing..."
        fi

        # Wait before retry
        if [ "${{ inputs.retry-wait-seconds }}" != "0" ]; then
          echo "⏳ Waiting ${{ inputs.retry-wait-seconds }} seconds before retry..."
          sleep ${{ inputs.retry-wait-seconds }}
        fi

        # Wait for original run to complete
        echo "⏳ Waiting for original run to complete..."
        gh run watch $RUN_ID > /dev/null 2>&1 || true

        # Check if a specific job name was requested
        REQUESTED_JOB_NAME="${{ github.event.client_payload.job_name }}"

        # Debug: Show all jobs and their status
        echo "🔍 Jobs in original run:"
        gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" \
          --jq '.jobs[] | "  - \(.name): \(.conclusion // .status) (ID: \(.id))"'

        if [ -n "$REQUESTED_JOB_NAME" ]; then
          echo "🎯 Looking for specific job: $REQUESTED_JOB_NAME"

          # Find the specific job by name
          SPECIFIC_JOB_ID=$(gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" \
            --jq ".jobs[] | select(.name == \"$REQUESTED_JOB_NAME\") | .id")

          if [ -n "$SPECIFIC_JOB_ID" ]; then
            echo "🔄 Re-running specific job: $REQUESTED_JOB_NAME (ID: $SPECIFIC_JOB_ID)"
            gh api "repos/${{ github.repository }}/actions/jobs/$SPECIFIC_JOB_ID/rerun" -X POST
            echo "✅ Specific job rerun triggered"
          else
            echo "::error::❌ Job '$REQUESTED_JOB_NAME' not found in workflow run $RUN_ID"
            echo "::error::Available jobs:"
            gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" \
              --jq '.jobs[] | "::error::  - \(.name) (ID: \(.id))"'
            echo "::error::This might happen if the job name contains special characters or if the original run is too old"
            exit 1
          fi
        else
          echo "::warning::⚠️ No specific job name provided in dispatch payload"
          echo "This might be an older retry format - falling back to retry all failed jobs"

          # Get only the failed job IDs
          FAILED_JOB_IDS=$(gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" \
            --jq '.jobs[] | select(.conclusion == "failure") | .id' | tr '\n' ' ')

          if [ -n "$FAILED_JOB_IDS" ]; then
            echo "🎯 Found failed jobs to retry: $FAILED_JOB_IDS"
            for JOB_ID in $FAILED_JOB_IDS; do
              JOB_NAME=$(gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" \
                --jq ".jobs[] | select(.id == $JOB_ID) | .name")
              echo "🔄 Re-running job: $JOB_NAME (ID: $JOB_ID)"
              gh api "repos/${{ github.repository }}/actions/jobs/$JOB_ID/rerun" -X POST
            done
            echo "✅ All failed jobs rerun triggered"
          else
            echo "::warning::⚠️ No failed jobs found in workflow run $RUN_ID"
            echo "This might happen if jobs were cancelled or if the run is still in progress"
          fi
        fi

        echo "✅ Re-run triggered successfully"
        echo "🔗 Monitor at: https://github.com/${{ github.repository }}/actions/runs/$RUN_ID"

    # Show max attempts reached message
    - name: Max attempts reached
      if: >
        job.status == 'failure' &&
        github.event_name != 'repository_dispatch' &&
        github.run_attempt >= fromJSON(inputs.max-attempts) &&
        inputs.force-retry != 'true'
      shell: bash
      run: |
        if [ "${{ inputs.warning-on-retry }}" = "true" ]; then
          echo "::warning::🚨 Max retry attempts reached (${{ github.run_attempt }}/${{ inputs.max-attempts }})"
        else
          echo "🚨 Max retry attempts reached (${{ github.run_attempt }}/${{ inputs.max-attempts }})"
        fi
        echo "❌ No more retries will be attempted for this workflow run"
        echo "💡 To retry again, manually re-run the workflow or push a new commit"
        echo "💡 Or set 'force-retry: true' to override this limit (use with caution)"

        # Add to step summary
        echo "## 🚨 Retry Limit Reached" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Attempt:** ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Max Attempts:** ${{ inputs.max-attempts }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** No more automatic retries will be triggered" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 **To retry:** Manually re-run this workflow or push a new commit" >> $GITHUB_STEP_SUMMARY
        echo "💡 **Or:** Set \`force-retry: true\` to override this limit (use with caution)" >> $GITHUB_STEP_SUMMARY

    # Detect failure and trigger retry (when used in regular jobs)
    - name: Trigger retry on failure
      if: >
        job.status == 'failure' &&
        github.event_name != 'repository_dispatch' &&
        (github.run_attempt < fromJSON(inputs.max-attempts) || inputs.force-retry == 'true')
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # Check if this is a forced retry
        if [ "${{ inputs.force-retry }}" = "true" ] && [ "${{ github.run_attempt }}" -ge "${{ inputs.max-attempts }}" ]; then
          if [ "${{ inputs.warning-on-retry }}" = "true" ]; then
            echo "::warning::⚠️ FORCE RETRY: Job failed, triggering retry despite max attempts (attempt ${{ github.run_attempt }}/${{ inputs.max-attempts }})"
          else
            echo "⚠️ FORCE RETRY: Job failed, triggering retry despite max attempts (attempt ${{ github.run_attempt }}/${{ inputs.max-attempts }})"
          fi
          echo "🚨 This is a forced retry beyond the normal limit - use with caution"
        else
          # Normal retry within limits
          if [ "${{ inputs.warning-on-retry }}" = "true" ]; then
            echo "::warning::🔄 Job failed, triggering retry (attempt ${{ github.run_attempt }}/${{ inputs.max-attempts }})"
          else
            echo "🔄 Job failed, triggering retry (attempt ${{ github.run_attempt }}/${{ inputs.max-attempts }})"
          fi
        fi

        echo "📊 Run ID: ${{ github.run_id }}"
        echo "🌿 Ref: ${{ github.ref }}"

        # Determine the job name to retry
        if [ -n "${{ inputs.job-name }}" ]; then
          JOB_TO_RETRY="${{ inputs.job-name }}"
          echo "🎯 Using provided job name: $JOB_TO_RETRY"
        else
          echo "🔍 Auto-detecting current job name..."
          # Get the current job's display name from the API
          JOB_TO_RETRY=$(gh api "repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" \
            --jq ".jobs[] | select(.runner_name != null and .status == \"in_progress\" or .status == \"completed\") | select(.steps[]?.name == \"Auto retry on failure\") | .name" | head -1)

          if [ -z "$JOB_TO_RETRY" ]; then
            # Fallback: try to match by job steps or other criteria
            echo "🔍 Fallback: detecting job by current context..."
            JOB_TO_RETRY=$(gh api "repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" \
              --jq ".jobs[] | select(.runner_name != null) | .name" | grep -E "Test|${{ github.job }}" | head -1)
          fi

          if [ -n "$JOB_TO_RETRY" ]; then
            echo "✅ Auto-detected job name: $JOB_TO_RETRY"
          else
            echo "::warning::⚠️ Could not auto-detect job name, will retry all failed jobs"
            JOB_TO_RETRY=""
          fi
        fi

        # Trigger retry via repository_dispatch
        echo "🚀 Dispatching retry for job: ${JOB_TO_RETRY:-all failed jobs}"

        # Build JSON payload using jq with specific job name
        PAYLOAD=$(jq -n \
          --arg event_type "auto-retry" \
          --arg run_id "${{ github.run_id }}" \
          --arg workflow "${{ github.workflow }}" \
          --arg ref "${{ github.ref }}" \
          --arg job_name "$JOB_TO_RETRY" \
          --argjson attempt ${{ github.run_attempt }} \
          '{
            event_type: $event_type,
            client_payload: {
              run_id: $run_id,
              workflow: $workflow,
              ref: $ref,
              attempt: $attempt,
              job_name: $job_name
            }
          }')

        curl -sS -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${{ github.repository }}/dispatches" \
          -d "$PAYLOAD"

        if [ $? -eq 0 ]; then
          echo "✅ Retry dispatched successfully"
          echo "🔗 Monitor retries at: https://github.com/${{ github.repository }}/actions"
        else
          echo "::error::❌ Failed to dispatch retry"
          exit 1
        fi

    # Show retry information if this run was triggered by retry
    - name: Show retry info
      if: github.event.client_payload.run_id != ''
      shell: bash
      run: |
        echo "ℹ️ This is a retry of run ${{ github.event.client_payload.run_id }}"
        echo "🔗 Original run: https://github.com/${{ github.repository }}/actions/runs/${{ github.event.client_payload.run_id }}"

        # Add to step summary
        echo "## 🔄 Retry Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Original Run:** [${{ github.event.client_payload.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.client_payload.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Retry Attempt:** ${{ github.event.client_payload.attempt }}" >> $GITHUB_STEP_SUMMARY

    # Provide helpful setup instructions if repository_dispatch is not configured
    - name: Check setup
      if: failure() && github.run_attempt >= fromJSON(inputs.max-attempts)
      shell: bash
      run: |
        echo "::warning::🚨 Max retry attempts reached (${{ inputs.max-attempts }})"
        echo "::notice::💡 To enable auto-retry, add this to your workflow triggers:"
        echo "::notice::   on:"
        echo "::notice::     push:"
        echo "::notice::     repository_dispatch:"
        echo "::notice::       types: [auto-retry]"