name: üéØ Flaky Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: üé≤ Test ${{ matrix.language }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    outputs:
      python-attempts: ${{ steps.set_results.outputs.python-attempts }}
      go-attempts: ${{ steps.set_results.outputs.go-attempts }}
      typescript-attempts: ${{ steps.set_results.outputs.typescript-attempts }}
      python-outcome: ${{ steps.set_results.outputs.python-outcome }}
      go-outcome: ${{ steps.set_results.outputs.go-outcome }}
      typescript-outcome: ${{ steps.set_results.outputs.typescript-outcome }}
    strategy:
      fail-fast: false
      matrix:
        language: [python, go, typescript]
        include:
          - language: python
            setup_cmd: |
              curl -LsSf https://astral.sh/uv/install.sh | sh
              echo "$HOME/.cargo/bin" >> $GITHUB_PATH
              uv python install 3.12
            install_cmd: install-python
            test_cmd: test-python-coverage
            coverage_paths: |
              python/coverage.xml
              python/htmlcov/
          - language: go
            setup_cmd: |
              # Go is pre-installed on ubuntu-latest
              go version
            install_cmd: install-go
            test_cmd: test-go-coverage
            coverage_paths: |
              go/coverage.out
              go/coverage.html
          - language: typescript
            setup_cmd: |
              # Node.js is pre-installed, just verify
              node --version
              npm --version
            install_cmd: install-ts
            test_cmd: test-ts-coverage
            coverage_paths: |
              typescript/coverage/
              typescript/junit.xml

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up ${{ matrix.language }} environment
      run: ${{ matrix.setup_cmd }}

    - name: Install just
      uses: extractions/setup-just@v2

    - name: Install ${{ matrix.language }} dependencies
      run: just ${{ matrix.install_cmd }}

    - name: Run ${{ matrix.language }} tests
      id: test_single_attempt
      run: just ${{ matrix.test_cmd }}
      continue-on-error: true

    - name: Debug step states
      if: always()
      run: |
        echo "üîç DEBUGGING STEP STATES"
        echo "Test step outcome: ${{ steps.test_single_attempt.outcome }}"
        echo "Test step conclusion: ${{ steps.test_single_attempt.conclusion }}"
        echo "Run attempt: ${{ github.run_attempt }}"
        echo "Run attempt check: ${{ fromJSON(github.run_attempt) < 5 }}"
    
    - name: Debug failure condition
      if: failure()
      run: |
        echo "üö® failure() condition is TRUE"
        echo "This step only runs if failure() evaluates to true"
    
    - name: Debug success condition  
      if: success()
      run: |
        echo "‚úÖ success() condition is TRUE"
        echo "This step only runs if success() evaluates to true"
    
    - name: Trigger automatic re-run
      if:
        ${{ failure() && steps.test_single_attempt.outcome == 'failure' && fromJSON(github.run_attempt) < 5}}
      env:
        GH_REPO: ${{ github.repository }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "‚ùå Test failed for ${{ matrix.language }} (attempt ${{ github.run_attempt }}/5)"
        echo "üîÑ Triggering automatic re-run of this same workflow..."
        echo "üìä Run ID: ${{ github.run_id }}"

        # Trigger rerun workflow to re-run this exact same workflow run
        gh workflow run retry.yml -f run_id="${{ github.run_id }}"

        echo "‚úÖ Re-run triggered - this will retry the same workflow run"


    - name: Set result outputs
      id: set_results
      if: always()
      run: |
        # Set outputs based on language
        # Determine outcome based on exit code
        if [ "${{ steps.test_single_attempt.outputs.TEST_EXIT_CODE }}" = "0" ]; then
          OUTCOME="success"
        else
          OUTCOME="failure"
        fi

        if [ "${{ matrix.language }}" = "python" ]; then
          echo "python-attempts=1" >> $GITHUB_OUTPUT
          echo "python-outcome=$OUTCOME" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.language }}" = "go" ]; then
          echo "go-attempts=1" >> $GITHUB_OUTPUT
          echo "go-outcome=$OUTCOME" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.language }}" = "typescript" ]; then
          echo "typescript-attempts=1" >> $GITHUB_OUTPUT
          echo "typescript-outcome=$OUTCOME" >> $GITHUB_OUTPUT
        fi
        echo "üìä ${{ matrix.language }} test completed with outcome: $OUTCOME"
        if [ "$OUTCOME" = "failure" ]; then
          echo "üîÑ Manual retry workflow triggered for better failure tracking"
        else
          echo "‚úÖ Test passed on first attempt - no retry needed"
        fi

    - name: Upload ${{ matrix.language }} coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.language }}-coverage
        path: ${{ matrix.coverage_paths }}
        retention-days: 30

  summary:
    name: üìä Test Summary
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
    - name: Generate test summary
      run: |
        echo "## üéØ Flaky Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Language | Result | Attempts Used |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|---------------|" >> $GITHUB_STEP_SUMMARY

        # Python results
        PYTHON_OUTCOME="${{ needs.test.outputs.python-outcome }}"
        PYTHON_ATTEMPTS="${{ needs.test.outputs.python-attempts }}"
        if [ "$PYTHON_OUTCOME" = "success" ]; then
          PYTHON_STATUS="‚úÖ Success"
        else
          PYTHON_STATUS="‚ùå Failed"
        fi
        echo "| üêç Python | $PYTHON_STATUS | ${PYTHON_ATTEMPTS:-Unknown} |" >> $GITHUB_STEP_SUMMARY

        # Go results
        GO_OUTCOME="${{ needs.test.outputs.go-outcome }}"
        GO_ATTEMPTS="${{ needs.test.outputs.go-attempts }}"
        if [ "$GO_OUTCOME" = "success" ]; then
          GO_STATUS="‚úÖ Success"
        else
          GO_STATUS="‚ùå Failed"
        fi
        echo "| üêπ Go | $GO_STATUS | ${GO_ATTEMPTS:-Unknown} |" >> $GITHUB_STEP_SUMMARY

        # TypeScript results
        TS_OUTCOME="${{ needs.test.outputs.typescript-outcome }}"
        TS_ATTEMPTS="${{ needs.test.outputs.typescript-attempts }}"
        if [ "$TS_OUTCOME" = "success" ]; then
          TS_STATUS="‚úÖ Success"
        else
          TS_STATUS="‚ùå Failed"
        fi
        echo "| üìò TypeScript | $TS_STATUS | ${TS_ATTEMPTS:-Unknown} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üé≤ About Flaky Tests" >> $GITHUB_STEP_SUMMARY
        echo "- **Pass rates**: 70%, 80%, 90% (designed to fail occasionally)" >> $GITHUB_STEP_SUMMARY
        echo "- **Retry strategy**: Manual retry workflow with separate runs" >> $GITHUB_STEP_SUMMARY
        echo "- **Real-world simulation**: Demonstrates CI/CD resilience patterns" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected behavior**: Failures trigger manual retry workflow" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîÑ Manual Retry Benefits" >> $GITHUB_STEP_SUMMARY
        echo "- **Separate runs**: Each retry creates its own workflow run" >> $GITHUB_STEP_SUMMARY
        echo "- **Better tracking**: GitHub API tracks each attempt individually" >> $GITHUB_STEP_SUMMARY
        echo "- **Clear logs**: Each retry has isolated logs and artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **Improved visibility**: Easier to see failure patterns and success rates" >> $GITHUB_STEP_SUMMARY
        echo "- **Manual control**: Can trigger retries manually via workflow_dispatch" >> $GITHUB_STEP_SUMMARY
