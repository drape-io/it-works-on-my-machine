name: 🎯 Flaky Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🎲 Test ${{ matrix.language }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    outputs:
      python-attempts: ${{ steps.set_results.outputs.python-attempts }}
      go-attempts: ${{ steps.set_results.outputs.go-attempts }}
      typescript-attempts: ${{ steps.set_results.outputs.typescript-attempts }}
      python-outcome: ${{ steps.set_results.outputs.python-outcome }}
      go-outcome: ${{ steps.set_results.outputs.go-outcome }}
      typescript-outcome: ${{ steps.set_results.outputs.typescript-outcome }}
    strategy:
      fail-fast: false
      matrix:
        language: [python, go, typescript]
        include:
          - language: python
            setup_cmd: |
              curl -LsSf https://astral.sh/uv/install.sh | sh
              echo "$HOME/.cargo/bin" >> $GITHUB_PATH
              uv python install 3.12
            install_cmd: install-python
            test_cmd: test-python-coverage
            coverage_paths: |
              python/coverage.xml
              python/htmlcov/
          - language: go
            setup_cmd: |
              # Go is pre-installed on ubuntu-latest
              go version
            install_cmd: install-go
            test_cmd: test-go-coverage
            coverage_paths: |
              go/coverage.out
              go/coverage.html
          - language: typescript
            setup_cmd: |
              # Node.js is pre-installed, just verify
              node --version
              npm --version
            install_cmd: install-ts
            test_cmd: test-ts-coverage
            coverage_paths: |
              typescript/coverage/
              typescript/junit.xml

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up ${{ matrix.language }} environment
      run: ${{ matrix.setup_cmd }}

    - name: Install just
      uses: extractions/setup-just@v2

    - name: Install ${{ matrix.language }} dependencies
      run: just ${{ matrix.install_cmd }}

    - name: Run ${{ matrix.language }} tests
      id: test_single_attempt
      run: |
        set +e  # Don't exit on error
        just ${{ matrix.test_cmd }}
        exit_code=$?
        echo "TEST_EXIT_CODE=$exit_code" >> $GITHUB_OUTPUT
        if [ $exit_code -eq 0 ]; then
          echo "✅ Tests passed"
          exit 0
        else
          echo "❌ Tests failed (exit code: $exit_code)"
          exit 0  # Don't fail here, let the retry trigger step handle it
        fi

    - name: Trigger manual retry on failure
      if: always() && steps.test_single_attempt.outputs.TEST_EXIT_CODE != '0'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
      run: |
        echo "❌ Test failed for ${{ matrix.language }}"
        echo "🔄 Triggering manual retry workflow for better failure tracking"
        echo "📊 Original run ID: ${{ github.run_id }}"

        # Store failure info and instructions for manual retry
        echo "💾 Storing failure information..."
        echo "FAILED_RUN_ID=${{ github.run_id }}" >> failure_info.txt
        echo "FAILED_LANGUAGE=${{ matrix.language }}" >> failure_info.txt
        echo "FAILED_REF=${{ github.ref_name }}" >> failure_info.txt
        echo "FAILED_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> failure_info.txt
        
        echo "🔄 Manual retry required due to GitHub token limitations."
        echo "To retry this failure:"
        echo "1. Go to https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "2. Click 'Re-run failed jobs' button"
        echo "3. Or manually trigger retry workflow with run_id: ${{ github.run_id }}, language: ${{ matrix.language }}"

        echo "✅ Manual retry triggered"
        echo "🔗 Monitor retries at: https://github.com/${{ github.repository }}/actions/workflows/retry.yml"
        
        # Make the job fail to show correct status
        echo "❌ Failing job to show correct status (retry triggered)"
        exit 1

        # Create failure summary
        echo "## ❌ Test Failure - Manual Retry Required" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Language | ${{ matrix.language }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Failed Run | [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 How to Retry" >> $GITHUB_STEP_SUMMARY
        echo "1. **Re-run this job**: Click 'Re-run failed jobs' on this run" >> $GITHUB_STEP_SUMMARY
        echo "2. **Manual retry workflow**: Go to [Actions](https://github.com/${{ github.repository }}/actions/workflows/retry.yml) → Run workflow" >> $GITHUB_STEP_SUMMARY
        echo "   - **run_id**: \`${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "   - **language**: \`${{ matrix.language }}\`" >> $GITHUB_STEP_SUMMARY
        echo "   - **attempt_number**: \`2\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Why Manual Retry?" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Each retry creates a separate workflow run for better tracking" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Clear failure visibility vs consolidated logs" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ GitHub token limitations prevent automatic dispatch from feature branches" >> $GITHUB_STEP_SUMMARY

    - name: Set result outputs
      id: set_results
      if: always()
      run: |
        # Set outputs based on language
        # Determine outcome based on exit code
        if [ "${{ steps.test_single_attempt.outputs.TEST_EXIT_CODE }}" = "0" ]; then
          OUTCOME="success"
        else
          OUTCOME="failure"
        fi

        if [ "${{ matrix.language }}" = "python" ]; then
          echo "python-attempts=1" >> $GITHUB_OUTPUT
          echo "python-outcome=$OUTCOME" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.language }}" = "go" ]; then
          echo "go-attempts=1" >> $GITHUB_OUTPUT
          echo "go-outcome=$OUTCOME" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.language }}" = "typescript" ]; then
          echo "typescript-attempts=1" >> $GITHUB_OUTPUT
          echo "typescript-outcome=$OUTCOME" >> $GITHUB_OUTPUT
        fi
        echo "📊 ${{ matrix.language }} test completed with outcome: $OUTCOME"
        if [ "$OUTCOME" = "failure" ]; then
          echo "🔄 Manual retry workflow triggered for better failure tracking"
        else
          echo "✅ Test passed on first attempt - no retry needed"
        fi

    - name: Upload ${{ matrix.language }} coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.language }}-coverage
        path: ${{ matrix.coverage_paths }}
        retention-days: 30

  summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
    - name: Generate test summary
      run: |
        echo "## 🎯 Flaky Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Language | Result | Attempts Used |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|---------------|" >> $GITHUB_STEP_SUMMARY

        # Python results
        PYTHON_OUTCOME="${{ needs.test.outputs.python-outcome }}"
        PYTHON_ATTEMPTS="${{ needs.test.outputs.python-attempts }}"
        if [ "$PYTHON_OUTCOME" = "success" ]; then
          PYTHON_STATUS="✅ Success"
        else
          PYTHON_STATUS="❌ Failed"
        fi
        echo "| 🐍 Python | $PYTHON_STATUS | ${PYTHON_ATTEMPTS:-Unknown} |" >> $GITHUB_STEP_SUMMARY

        # Go results
        GO_OUTCOME="${{ needs.test.outputs.go-outcome }}"
        GO_ATTEMPTS="${{ needs.test.outputs.go-attempts }}"
        if [ "$GO_OUTCOME" = "success" ]; then
          GO_STATUS="✅ Success"
        else
          GO_STATUS="❌ Failed"
        fi
        echo "| 🐹 Go | $GO_STATUS | ${GO_ATTEMPTS:-Unknown} |" >> $GITHUB_STEP_SUMMARY

        # TypeScript results
        TS_OUTCOME="${{ needs.test.outputs.typescript-outcome }}"
        TS_ATTEMPTS="${{ needs.test.outputs.typescript-attempts }}"
        if [ "$TS_OUTCOME" = "success" ]; then
          TS_STATUS="✅ Success"
        else
          TS_STATUS="❌ Failed"
        fi
        echo "| 📘 TypeScript | $TS_STATUS | ${TS_ATTEMPTS:-Unknown} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎲 About Flaky Tests" >> $GITHUB_STEP_SUMMARY
        echo "- **Pass rates**: 50%, 60%, 75% (designed to fail frequently)" >> $GITHUB_STEP_SUMMARY
        echo "- **Retry strategy**: Manual retry workflow with separate runs" >> $GITHUB_STEP_SUMMARY
        echo "- **Real-world simulation**: Demonstrates CI/CD resilience patterns" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected behavior**: Failures trigger manual retry workflow" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Manual Retry Benefits" >> $GITHUB_STEP_SUMMARY
        echo "- **Separate runs**: Each retry creates its own workflow run" >> $GITHUB_STEP_SUMMARY
        echo "- **Better tracking**: GitHub API tracks each attempt individually" >> $GITHUB_STEP_SUMMARY
        echo "- **Clear logs**: Each retry has isolated logs and artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **Improved visibility**: Easier to see failure patterns and success rates" >> $GITHUB_STEP_SUMMARY
        echo "- **Manual control**: Can trigger retries manually via workflow_dispatch" >> $GITHUB_STEP_SUMMARY
